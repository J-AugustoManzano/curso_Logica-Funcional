! Scripts do curso de Lógica Funcional (Hope)
! ===========================================

! Aula  5
! =======

dec x_pi : num;
--- x_pi <= 3.14159;

dec acirc : num -> num;
--- acirc r <= x_pi * pow (r, 2);

dec soma : num # num -> num;
--- soma (x, y) <= x + y;

! Aula 10
! =======

dec adicao : num # num -> num;
--- adicao (0, y) <= y;
--- adicao (x, 0) <= x;
--- adicao (0, 0) <= 9999;
--- adicao (x, y) <= x + y;

dec par : num -> truval;
--- par n <= if n mod 2 = 0
             then true
             else false;

dec impar : num -> truval;
--- impar n <= if n mod 2 /= 0
               then true
               else false;

dec valor : num -> num;
--- valor 0 <= 0;
--- valor 1 <= 2;
--- valor n <= if n > 1 and n < 9                         
               then n * 5 
               else n / 5;

! Aula 16
! =======

dec fat1 : num -> num;
--- fat1 0 <= 1;
--- fat1 n <= n * fat1 (n - 1);

dec fib1 : num -> num;
--- fib1 0 <= 0;
--- fib1 1 <= 1;
--- fib1 n <= fib1 (n - 1) + fib1 (n – 2);

dec ftbase : num # num -> num;
--- ftbase (0, x) <= x;
--- ftbase (n, x) <= ftbase (n - 1, n * x);

dec fat2 : num -> num;
--- fat2 n <= ftbase (n, 1);

dec fbs : num # num # num -> num;
--- fbs (0, anter, atual) <= anter;
--- fbs (1, anter, atual) <= atual;
--- fbs (2, anter, atual) <= atual + anter;
--- fbs (n, anter, atual) <= fbs (n - 1, atual, anter + atual);

dec fib2 : num -> num;
--- fib2 (n) <= fbs (n, 0, 1);

! Aula 22
! =======

dec lst : num -> list num;
--- lst 0 <= [];
--- lst n <= n :: lst (n - 1);

dec cabeca : list num -> num;
--- cabeca [] <= error ("Lista vazia!");  
--- cabeca (x :: xs) <= x;

dec cauda : list num -> list num;
--- cauda [] <= error ("Lista vazia!");  
--- cauda (x :: xs) <= xs;

dec ultimo : list num -> num;
--- ultimo [] <= error ("Lista vazia!");
--- ultimo ([x]) <= x;
--- ultimo (x :: xs) <= ultimo xs;

dec arranjo : list num -> list num;
--- arranjo ([]) <= error ("Lista vazia!"); 
--- arranjo ([x]) <= [];
--- arranjo (x :: xs) <= x :: arranjo (xs);

dec elem2 : list num -> num;
--- elem2 [] <= error ("Lista vazia!");
--- elem2 ([x]) <= error ("Poucos elementos!");
--- elem2 (a :: b :: bs) <= b;

dec tamanho : list num -> num;
--- tamanho [] <= 0;
--- tamanho (x :: xs) <= 1 + tamanho (xs);

dec elempnt : list num -> num;
--- elempnt [] <= error "Lista vazia!";
--- elempnt ([x]) <= error "Poucos elementos!";
--- elempnt (x :: xs) <= if tamanho xs = 1
                         then x
                         else elempnt xs;

! Aula 27
! =======

dec comp : list num # (num -> truval) -> list num;
--- comp ([], func) <= []; 
--- comp (x :: xs, func) <= if func x 
                            then x :: comp (xs, func)
                            else comp (xs, func);

dec faixa : num # num # num -> list num;
--- faixa (i, f, p) <= if i > f
                       then []
                       else i :: faixa (i + p, f, p);

dec listapot : num # list num -> list num;
--- listapot (n, []) <= [];
--- listapot (n, x :: xs) <= pow (x, n) :: listapot (n, xs);

dec multiplo : num # num -> truval;
--- multiplo (n, m) <= if n mod m = 0 
                       then true 
                       else false;

dec divisor : num -> list num;
--- divisor (n) <= 
      comp (faixa (1, n, 1), \ d => multiplo (n, d));

dec listamult : list num # num -> list num;
--- listamult ([], n) <= [];
--- listamult (x :: xs, n) <= if n mod x = 0
                              then x :: listamult (xs, n)
                              else listamult (xs, n);

dec divisor2 : num -> list num; 
--- divisor2 (n) <= listamult (faixa (1, n, 1), n);

dec checa_primo : num -> truval;
--- checa_primo (1) <= false;
--- checa_primo (2) <= true;
--- checa_primo (n) <= 
      if (tamanho (listamult (faixa (2, n - 1, 1), n)) > 0) 
      then false
      else true;

dec lprimos : num -> list num;
--- lprimos (n) <= 
      comp (faixa (1, n, 1), \ x => checa_primo (x));

! Aula 32
! =======

dec membro : num # list num -> truval;
--- membro (n, []) <= false;
--- membro (n, x :: xs) <= if n = x 
                           then true 
                           else membro (n, xs);


dec juncao : list num # list num -> list num;
--- juncao ([], []) <= [];
--- juncao (a, []) <= a;
--- juncao ([], b) <= b;
--- juncao (a :: ax, b) <= a :: juncao (ax, b);

dec unico : list num -> list num;
--- unico [] <= [];
--- unico (x :: xs) <= if membro (x, xs)
                       then unico xs
                       else x :: unico xs;

dec insira : num # list num -> list num;
--- insira (n, []) <= [n];
--- insira (n, x :: xs) <= if n =< x
                           then n :: x :: xs
                           else x :: insira (n, xs);

dec classifica : list num -> list num;
--- classifica [] <= [];
--- classifica (x :: xs) <= insira (x, classifica xs);

dec uniao : list num # list num -> list num;
--- uniao (a, b) <= classifica (unico (juncao (a, b)));

dec interseccao : list num # list num -> list num;
--- interseccao (a, []) <= [];
--- interseccao ([], b) <= [];
--- interseccao (a, x :: b) <= if membro (x, a) 
                               then x :: interseccao (a, b) 
                               else interseccao (a, b);

dec diferenca : list num # list num -> list num;
--- diferenca (a, []) <= a;
--- diferenca ([], b) <= [];
--- diferenca (a :: ax, b) <= if membro (a, b) 
                              then diferenca (ax, b) 
                              else a :: diferenca (ax, b);

dec sub_lista : list num # list num -> truval;
--- sub_lista ([], []) <= true;
--- sub_lista ([], b) <= true;
--- sub_lista (a, []) <= false;
--- sub_lista (a :: ax, b) <= if membro (a, b)
                              then sub_lista (ax, b)
                              else false;

dec igualdade : list num # list num -> truval;
--- igualdade (a, b) <= sub_lista(a, b) and sub_lista(b, a);

! Aula 33
! =======

dec mapa : list num # (num -> num) -> list num;
--- mapa ([], funcao) <= [];
--- mapa (x :: xs, funcao) <= funcao x :: mapa (xs, funcao);

dec filtro : list num # (num -> truval) -> list num;
--- filtro ([], funcao) <= [];
--- filtro (x :: xs, funcao) <= if funcao x
                                then x :: filtro (xs, funcao)
                                else filtro (xs, funcao);

dec reducao : list num # (num # num -> num) # num -> num;
--- reducao ([], funcao, n) <= n;
--- reducao (x :: xs, funcao, n) <= funcao (x, reducao (xs, funcao, n));

dec compacta : list num # list num -> list (num # num);
--- compacta ([], b) <= [];
--- compacta (a, []) <= [];
--- compacta (x :: xs, y :: ys) <= (x, y) :: compacta (xs,  ys);

dec oposto : list num -> list num;
--- oposto [] <= [];
--- oposto (x :: xs) <= oposto xs <> [x];

dec dcp_base : list num # list num # list (num # num) -> list num # list num;
--- dcp_base (xs, ys, []) <= (oposto xs, oposto ys);
--- dcp_base (xs, ys, (x, y) :: zs) <= dcp_base (x :: xs, y :: ys, zs);

dec descompacta : list (num # num) -> list num # list num;
--- descompacta [] <= ([], []);
--- descompacta xs <= dcp_base ([], [], xs);

! Exercícios de fixação do curso
! ==============================

! Aula  6
! =======

dec suc : num -> num;
--- suc x <= x + 1;

dec ant  : num -> num;
--- ant  x <= x - 1;

! Aula  7
! =======

dec qsoma : num # num -> num;
--- qsoma (a, b) <= pow (a + b, 2);

dec cubo : num -> num;
--- cubo x <= pow (x, 3);

! Aula  8
! =======

dec produto : num # num -> num;
--- produto (x, y) <= x * y;

dec imc : num # num -> num;
--- imc (p, a) <= p / pow (a, 2);

! Aula  9
! =======

dec dolar : num # num -> num;
--- dolar (real, valor) <= real * valor;

dec squad : num # num -> num;
--- squad (a, b) <= pow (a, 2) + pow (b, 2);

! Aula 11
! =======

dec min : num # num -> num;
--- min (x, y) <= if x < y then x else y;

dec max : num # num -> num;
--- max (x, y) <= if x > y then x else y;

! Aula 12
! =======

dec sinal : num # num -> num;
--- sinal (x, y) <= if x < y 
                    then 0 - 1 
                    else if x > y then 1 else 0;

dec abc : num -> num;
--- abc 0 <= 1;
--- abc 1 <= 2;
--- abc 2 <= 4;
--- abc x <= if x > 2 then 9 else 0;

! Aula 17
! =======

dec pot1 : num # num -> num;
--- pot1 (b, 0) <= 1;
--- pot1 (b, 1) <= b;
--- pot1 (b, e) <= b * pot1 (b, e - 1);

dec duplo_fat1 : num -> num;
--- duplo_fat1 0 <= 1;
--- duplo_fat1 1 <= 1;
--- duplo_fat1 n <= n * duplo_fat1(n - 2);

! Aula 18
! =======

dec mdc : num # num -> num;
--- mdc (a, 0) <= a;
--- mdc (a, b) <= mdc (b, a mod b);

dec hanoi1 : num -> num;
--- hanoi1 1 <= 1;
--- hanoi1 (n + 1) <= 1 + 2 * hanoi1 n;

! Aula 19
! =======

dec mult : num # num -> num;
--- mult (m, 0) <= 0;
--- mult (m, n) <= if n > 0
                   then m + mult (m, n - 1)
                   else 0 - mult (m, 0 - n);

dec somat1 : num -> num;
--- somat1 0 <= 0;
--- somat1 1 <= 1;
--- somat1 n <= n + somat1 (n - 1);

! Aula 20
! =======

dec pell : num -> num;
--- pell 0 <= 0;
--- pell 1 <= 1;
--- pell n <= 2 * pell(n - 1) + pell (n - 2);

dec divide : num # num -> num;
--- divide (n, d) <= if n < d
                     then 0
                     else 1 + divide (n - d, d);

! Aula 21
! =======

dec smbase : num # num -> num;
--- smbase (0, x) <= x;
--- smbase (n, x) <= smbase (n - 1, n + x);

dec somat2 : num -> num;
--- somat2 n <= smbase (n, 0);

dec potbs : num # num # num -> num;
--- potbs (b, 0, v) <= v;
--- potbs (b, 1, v) <= v * b;
--- potbs (b, e, v) <= potbs(b, e - 1, b * v);

dec pot2 : num # num -> num;
--- pot2 (b, e) <= potbs (b, e, 1);

dec dftbs : num # num -> num;
--- dftbs (0, x) <= x;
--- dftbs (1, x) <= x;
--- dftbs (n, x) <= dftbs (n - 2, n * x);

dec duplo_fat2 : num -> num;
--- duplo_fat2 n <= dftbs (n, 1);

! Aula 23
! =======

dec mostre : list num -> list num;
--- mostre [] <= [];
--- mostre (x :: xs) <= x :: mostre xs;

dec inverte : list num -> list num;
--- inverte [] <= [];
--- inverte (x :: xs) <= inverte xs <> [x];

! Aula 24
! =======

dec qual_elemento : num # list num -> num;
--- qual_elemento (1, x :: xs) <= x;
--- qual_elemento (n, x :: xs) <=       qual_elemento (n - 1, xs);

dec duplique : list num -> list num;
--- duplique [] <= [];
--- duplique (x :: xs) <= x :: x :: duplique xs;

! Aula 25
! =======

dec poe_final : num # list num -> list num;
--- poe_final (x, []) <= [x];
--- poe_final (x, y :: ys) <= y :: poe_final (x, ys); 

dec somalst : list num -> num;
--- somalst ([]) <= 0;
--- somalst (x :: xs) <= x + somalst xs; 

! Aula 26
! =======

dec intervalo : num # num -> list num;
--- intervalo (m, n) <= if m > n 
                        then [] 
                        else m :: intervalo (m + 1, n);

dec lstmax : list num -> num;
--- lstmax [] <= error "Lista vazia!";
--- lstmax ([x]) <= x;
--- lstmax (x :: xs) <= if x > lstmax xs
                        then x 
                        else lstmax xs;

dec lstmin : list num -> num;
--- lstmin [] <= error "Lista vazia!";
--- lstmin ([x]) <= x;
--- lstmin (x :: xs) <= if x < lstmin xs
                        then x 
                        else lstmin xs;

dec lista_min_max : list num -> list num;
--- lista_min_max [] <= error "Lista vazia!";
--- lista_min_max (x :: xs) <= [lstmin (x :: xs)] <>
                               [lstmax (x :: xs)];

! Aula 27
! =======




! Aula 28
! =======

dec poe_ultimo : num # list num -> list num;
--- poe_ultimo (n, []) <= [n];
--- poe_ultimo (n, x :: xs) <= x :: poe_ultimo (n, xs);

dec divisores : num -> list num;
--- divisores n <= 
      inverte (comp (faixa (1, n + 1, 1), 
      \ x => multiplo(n, x)));

! Aula 29
! =======

dec produtolst : list num -> num;
--- produtolst ([]) <= 1;
--- produtolst (x :: xs) <= x * produtolst xs;

dec faixa_primo : num # num -> list num;
--- faixa_primo (n, m) <= comp (faixa (n, m, 1), 
      \ x => checa_primo (x));

! Aula 30
! =======

dec amigos : num # num -> truval;
--- amigos (x, y) <= 
      somalst (divisores x) - x = y 
      and somalst (divisores y) - y = x;

dec abundante : num -> truval;
--- abundante n <= 
      somalst (comp (faixa (1, n + 1, 1), 
      \ x => multiplo(n, x))) - n > n;

! Aula 31
! =======

dec div84 : num -> truval;
--- div84 n <= if n mod 8 = 4 
               then true 
               else false;

dec lstdiv84 : num -> list num;
--- lstdiv84 n <= 
      comp (faixa (1, n, 1), \ x => div84 x);

! Aula 34
! =======

dec labundante : num -> list num;
--- labundante n <= filtro (faixa (1, n, 1), \ x => abundante x); 

dec soma_impares : num -> num;
--- soma_impares n <= 
      reducao (filtro (faixa (1, n, 1), \ n => impar n), soma, 0);

! Aula 35
! =======

dec quadrados : num # num -> list num;
--- quadrados (n, m) <= mapa (comp (faixa (n, m, 1), 
      \x => impar(x)), \x => pow (x, 2));

dec perfeito : num -> truval;
--- perfeito 0 <= false;
--- perfeito n <= n = reducao (comp (faixa (1, n - 1, 1), 
      \ x => multiplo(n, x)), soma, 0); 


